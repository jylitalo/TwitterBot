---
# tasks file for TwitterBot
- name: Build Lambda package
  build_zip:
    source: "{{ role_path }}/files/lambda"
    command: "pip3 install -I -t ./ requirements.txt"
    files: "."
    zip_file: "{{ role_path }}/files/twitbot.zip"
- name: Upload zip file into bucket
  s3_object:
    bucket: "{{ s3_bucket }}"
    key: "twitbot.cf"
    content: "{{ lookup('template', './twitbot.cf.j2') }}"
- name: role for lambda
  iam_role:
    name: twitbot
    assume_role_policy_document: "{{ lookup('file','role_policy.json') }}"
    state: "{{ state }}"
  register: twitbot_role
- name: policy for role
  iam_policy:
    iam_type: role
    iam_name: twitbot
    policy_name: CloudWatchLogs
    state: present
    policy_json: "{{ lookup('template','actions_policy.json.j2') }}"
- name: clear old lambda_functions
  lambda:
    name: twitbot
    state: absent
- name: lambda_function
  lambda:
    name: twitbot
    state: "{{ state }}"
    zip_file: "{{ role_path }}/files/twitbot.zip"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    role: "{{ twitbot_role.iam_role.arn }}"
    runtime: "python3.6"
    handler: "twitbot.lambda_handler"
    memory_size: 256
    timeout: 300
    environment_variables:
      S3_BUCKET: "{{ s3_bucket }}"
      SMTP_USER: "{{ smtp_user }}"
      SMTP_PASSWORD: "{{ smtp_password }}"
      SMTP_HOST: "{{ smtp_host }}"
      SMTP_PORT: "{{ smtp_port }}"
      TWITTER_CONSUMER_KEY: "{{ twitter_consumer_key }}"
      TWITTER_CONSUMER_SECRET: "{{ twitter_consumer_secret }}"
      TWITTER_ACCESS_TOKEN_KEY: "{{ twitter_access_token_key }}"
      TWITTER_ACCESS_TOKEN_SECRET: "{{ twitter_access_token_secret }}"
  register: twitbot_lambda
- name: cloudwatchevent_rule
  cloudwatchevent_rule:
    name: twitbot_schedule
    description: "Run twitbot daily"
    schedule_expression: "cron(0 6 * * ? *)"
    state: "{{ state }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    targets:
      - id: twitbot_rule
        arn: "{{ twitbot_lambda.configuration.function_arn }}"
  register: twitbot_rule
- name: lambda_policy
  lambda_policy:
    state: "{{ state }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    function_name: "{{ twitbot_lambda.configuration.function_name }}"
    version: "{{ twitbot_lambda.configuration.version }}"
    statement_id: twitbot_sid
    action: "lambda:InvokeFunction"
    principal: "events.amazonaws.com"
    source_arn: "{{ twitbot_rule.rule.arn }}"
